{"ast":null,"code":"var BASE_URL='https://mate.academy/students-api';// a promise resolved after a given delay\nfunction wait(delay){return new Promise(function(resolve){setTimeout(resolve,delay);});}// To have autocompletion and avoid mistypes\nfunction request(url){var method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'GET';var data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var options={method:method};if(data){// We add body and Content-Type only for the requests with data\noptions.body=JSON.stringify(data);options.headers={'Content-Type':'application/json; charset=UTF-8'};}// we wait for testing purpose to see loaders\nreturn wait(300).then(function(){return fetch(BASE_URL+url,options);}).then(function(response){if(!response.ok){throw new Error();}return response.json();});}export var client={get:function get(url){return request(url);},post:function post(url,data){return request(url,'POST',data);},patch:function patch(url,data){return request(url,'PATCH',data);},delete:function _delete(url){return request(url,'DELETE');}};","map":{"version":3,"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","get","post","patch","delete"],"sources":["C:/CV_projects/Todo-app/src/utils/fetchClient.ts"],"sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n"],"mappings":"AAAA,GAAMA,SAAQ,CAAG,mCAAmC,CAEpD;AACA,QAASC,KAAI,CAACC,KAAa,CAAE,CAC3B,MAAO,IAAIC,QAAO,CAAC,SAAAC,OAAO,CAAI,CAC5BC,UAAU,CAACD,OAAO,CAAEF,KAAK,CAAC,CAC5B,CAAC,CAAC,CACJ,CAEA;AAGA,QAASI,QAAO,CACdC,GAAW,CAGC,IAFZC,OAAqB,2DAAG,KAAK,IAC7BC,KAAS,2DAAG,IAAI,CAEhB,GAAMC,QAAoB,CAAG,CAAEF,MAAM,CAANA,MAAO,CAAC,CAEvC,GAAIC,IAAI,CAAE,CACR;AACAC,OAAO,CAACC,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CACnCC,OAAO,CAACI,OAAO,CAAG,CAChB,cAAc,CAAE,iCAClB,CAAC,CACH,CAEA;AACA,MAAOb,KAAI,CAAC,GAAG,CAAC,CACbc,IAAI,CAAC,iBAAMC,MAAK,CAAChB,QAAQ,CAAGO,GAAG,CAAEG,OAAO,CAAC,GAAC,CAC1CK,IAAI,CAAC,SAAAE,QAAQ,CAAI,CAChB,GAAI,CAACA,QAAQ,CAACC,EAAE,CAAE,CAChB,KAAM,IAAIC,MAAK,EAAE,CACnB,CAEA,MAAOF,SAAQ,CAACG,IAAI,EAAE,CACxB,CAAC,CAAC,CACN,CAEA,MAAO,IAAMC,OAAM,CAAG,CACpBC,GAAG,CAAE,aAAIf,GAAW,QAAKD,QAAO,CAAIC,GAAG,CAAC,GACxCgB,IAAI,CAAE,cAAIhB,GAAW,CAAEE,IAAS,QAAKH,QAAO,CAAIC,GAAG,CAAE,MAAM,CAAEE,IAAI,CAAC,GAClEe,KAAK,CAAE,eAAIjB,GAAW,CAAEE,IAAS,QAAKH,QAAO,CAAIC,GAAG,CAAE,OAAO,CAAEE,IAAI,CAAC,GACpEgB,MAAM,CAAE,iBAAClB,GAAW,QAAKD,QAAO,CAACC,GAAG,CAAE,QAAQ,CAAC,EACjD,CAAC"},"metadata":{},"sourceType":"module"}